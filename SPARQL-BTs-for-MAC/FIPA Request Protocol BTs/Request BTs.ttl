# @base <http://localhost:8090/rdf4j/repositories/behaviors#> .

@prefix agents: <http://localhost:8090/rdf4j/repositories/agents#> .
@prefix : <http://localhost:8090/rdf4j/repositories/behaviors#> .
@prefix domain: <http://localhost:8090/rdf4j/repositories/domain#> .
@prefix localServices: <http://localhost:8090/rdf4j/repositories/localServices#> .
@prefix localAgents: <http://localhost:8090/rdf4j/repositories/localAgents#> .
@prefix services: <http://localhost:8090/rdf4j/repositories/services#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ajan: <http://www.ajan.de/ajan-ns#> .
@prefix bt: <http://www.ajan.de/behavior/bt-ns#> .
@prefix actn: <http://www.ajan.de/actn#> .
@prefix http-headers: <http://www.w3.org/2008/http-headers#> .
@prefix http-methods: <http://www.w3.org/2008/http-methods#> .
@prefix http-core: <http://www.w3.org/2006/http#> .
@prefix ssc: <http://welcome/ajan/servicecomputing#> .
@prefix welcomePlugin: <http://welcome/ajan/plugin#> .

# ----------------------------------------------
# ------------- WelcomeBehaviorTree ------------
# ----------------------------------------------

# ----------- Endpoint ------------

# localhost:8080/welcome/integration/coordination/ajan/agents/<agentName>?capability=receiveSpeechAct | POST | text/turtle
# Body: "<http://test/Subject> <http://test/predicate> "Hallo! I come from the KMS" ."
# localhost:8080/welcome/integration/coordination/ajan/agents/<agentName>?capability=populateRepo | POST | text/turtle
# Body: "<http://test/Subject> <http://test/predicate> "Hallo! I come from the WPM" ."

# -------------------------------------------
# ---------------- Behaviors ----------------
# -------------------------------------------



# ----------- MAJAN BTs -----------


:SendCoordRequestTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Send Coord. Request Temp. BT" ;
	bt:hasChild [
			a bt:UntilFail ;
			bt:hasChild [
				a bt:Priority ;
				bt:hasChildren (
					[
						a bt:Sequence ;
						bt:hasChildren (
							:HandleStartCoordRequestEvent
							:MakeMacProblemUnique   
							:SetMacProblemRunning
							:SaveMacProblem 	 
							:WriteThisAgentIdToEKB
							:LOGStartedCoordination # activity-mac problem: id, participants, notifnec, timeout, quorum, id
							:WriteParticipantAddressesToEKB
							:GenerateNewConvInstance
							:InsertHandleRequestCapability
							:InsertMacProblemInfoToConversation
							#:WriteEverythingToLSR
							:MessageToParticipants
							:LOGSentRequestToParticipants # content: conversation, participants, content
							[
								a bt:UntilSuccess ;
								bt:hasChild [
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:GetResponses
												[
													a bt:Priority ;
													bt:hasChildren (
														[
															a bt:Invert ;
															bt:hasChild 
																:NotificationNecessary
														]
														:AgreementsReached
													)
												]
												:QuorumReached
												:SetQuorumReached
											)	
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:TimeoutReached
												:SetTimeoutReached
											)
										]
									)
								]
							]
							:AddConversationToMacProblem  # add the executed conversation (with status) to the mac problem in execution knowledge
							# Following node can be used if users want to add custom behavior based on Quorum or Timeout reached
							[
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:IsQuorumReached
											:LOGQuorumReached # conversation, quorum reached
										)
									]
									[
										a bt:Sequence ;
										bt:hasChildren (
											:LOGTimeoutReached #conversation, timeout reached
											:JustFail  # if timeout reached, then don't continue, BREAK 
										)
									]
								)
							]
							:SetMacProblemCompleted
							:SaveMacProblem  # save the mac problem with an added conversation to agent knowledge
							:ClearEKB
						)
					]
					[
						a bt:Sequence ;
						bt:hasChildren (
							:ClearEKB
							:JustFail
						)
					]
				)
			]
	] .


:HandleCoordRequestTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Handle Coord. Request Templ. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleReceiveCoordRequestEvent
						:WriteThisAgentIdToEKB
						#:WriteEverythingToLSR
						:LOGReceivedCoordinationRequest # conversation, 
						:Wait3Sec
						:InsertAgreedToRequest
						:InsertDefaultResponseCapability
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
												:LOGAgreedToRequest
											)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
												:RefusedMessageToInitiator
												:LOGRefusedRequest
											)
										]
									)
								]
							)
						]
						:Wait3Sec
						:InsertRequestResult
						:InsertInitiatorAsReceiver
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:SendResultMessage
										:LOGResultOfRequest
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].



:ReceiveCoordRequestResponseTempBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Receive Coord. Request Response Temp. BT" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleReceiveCoordResponseEvent
						:SaveResponse
						:WriteThisAgentIdToEKB
						#:ClearLSR
						#:WriteEverythingToLSR
						:LOGSavedRequestResponse
						:ClearEKB
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
			)
		]
	].



:HandleFinalizeCoordinationEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Finalize Coordination Event" ;
	bt:event agents:FinalizeCoordinationEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation ;
										mac:hasSolver 	?solver ;
										mac:hasSolution 	?grouping .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?grouping 	?solutionPred 	?solutionObj ;
									mac:hasMembers 	?group .
						?group 	?groupPred 	?groupObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .
						OPTIONAL {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasSolver ?solver .

						}
						OPTIONAL{
							?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
											mac:hasSolution 	?grouping .
							?grouping 	?solutionPred 	?solutionObj ;
										mac:hasMembers 	?group .
							?group 	?groupPred 	?groupObj .
						}
					}
					"""^^xsd:string ;
				] .

:ProduceFinalizeCoordinatonEvent
	a bt:EventProducer ;
	rdfs:label "Produce Finalize Coordination Event" ;
	ajan:event agents:FinalizeCoordinationEvent ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation ;
										mac:hasSolver 	?solver ;
										mac:hasSolution 	?grouping .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .

						?grouping 	?solutionPred 	?solutionObj ;
									mac:hasMembers 	?group .
						?group 	?groupPred 	?groupObj .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasStartTime 	?startTime ;
										mac:hasStatus 	?macStatus ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasNumberOfAgents 	?numberOfAgents ;
										mac:hasParticipants 	?participantId ;
										mac:hasConversation 	?conversation .

						?conversation 	rdf:type 	mac:Conversation ;
										mac:hasMacProblemId 	?macId ;
										mac:hasId	?convId ;
										?convPred 	?convObj .
						OPTIONAL {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasSolver ?solver .

						}
						OPTIONAL{
							?macInstance 	mac:hasSolution 	?grouping .
							?grouping 	?solutionPred 	?solutionObj ;
										mac:hasMembers 	?group .
							?group 	?groupPred 	?groupObj .
						}
					}"""^^xsd:string ;
				] .



:HandleReceiveAgentProfileInfoRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Agent Profile Info Request Event" ;
	bt:event agents:AgentProfileInfoRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .


:HandleStartCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Start Coord. Request Event" ;
	bt:event agents:SendCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveCoordRequestEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Coord. Request Event" ;
	bt:event agents:HandleCoordRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveCoordResponseEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Coord. Request Response Event" ;
	bt:event agents:ReceiveCoordRequestResponseEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .


# ---------- templ bts without goals



:TempHandlePrsInfoRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template BT 2 Handle Personal Info Request" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandlePrsInfoRequestEvent
						:ProduceHandlePrsInfoRequestGoal
						:Wait3Sec
						:QueryPrsInfo
						#:WriteThisAgentIdToEKB
						:ProduceSendPrsInfoGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				 ].



:TempStartCoordinationBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Start Coordination Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandleStartCoordEvent
						:ProduceInitiatorSendRequestGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				] .


:TempReceiveRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Receive Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
				a bt:Sequence ;
				bt:hasChildren (
						:HandleReceiveRequestEvent
						:ProducePartHandleRequestGoal
						:Wait3Sec
						:ProducePartSendResultGoal
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
				)
				 ].



:TempReceiveParticipantReplyBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Template Behavior Tree to receive participant reply" ;
	bt:hasChild [
		a bt:UntilFail ;
		bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						#[
						#	a bt:UntilFail ;
						#	bt:hasChild [
						#			a bt:Sequence ;
						#			bt:hasChildren (
						#					:InitiatorReceiveReplyGoalRunning
						#			)							
						#	]
						#]
						#:SetInitiatorReceiveReplyGoalRunning
						:HandleReceiveResponseEvent
						#:SaveResponse
						#:SaveAllToAKB
						#:ProduceInitiatorReceiveReplyGoal
						#:SetInitiatorReceiveReplyGoalCompleted
						:ClearEKB
							)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:ClearEKB
						:JustFail
					)
				]
				[
					a bt:Sequence ;
					bt:hasChildren (
						:SetInitiatorReceiveReplyGoalCompleted
						:JustFail
					)
				]

				)
				]
	].


:RP_InitiatorSendRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Initiator Send Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleInitSendRequestGoal
						:WriteThisAgentIdToEKB
						:WriteParticipantAddressesToEKB
						:MessageToParticipants
						:SaveRequest
						[
							a bt:UntilSuccess ;
							bt:hasChild [
								a bt:Priority ;
								bt:hasChildren (
									[
										a bt:Sequence ;
										bt:hasChildren (
											:GetResponses
											[
												a bt:Priority ;
												bt:hasChildren (
													[
														a bt:Invert ;
														bt:hasChild 
															:NotificationNecessary
													]
													:AgreementsReached
												)
											]
											:QuorumReached
										)	
									]
									:TimeoutReached
								)
							]
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
		)
				
	] .

:RP_ParticipantHandleRequestBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Participant Handle Request Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandlePartRequestGoal
						:WriteThisAgentIdToEKB
						:WriteParticipantAddressesToEKB
						[
							a bt:Invert ;
							bt:hasChild 
								:TimeoutReached
						]
						[
							a bt:Priority ;
							bt:hasChildren (
								[
									a bt:Invert ;
									bt:hasChild 
										:NotificationNecessary
								]
								[
									a bt:Priority ;
									bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
												:AgreedToPerformRequest
												:AgreedMessageToInitiator
											)
										]
										:RefusedMessageToInitiator
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
		)
	] .

:RP_InitiatorReceiveReplyBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Initiator Receive Reply Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren (
						:HandleInitReceiveReplyGoal
						:SaveResponse
						:ClearEKB
							)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
			)
	] .

:RP_ParticipantSendResultBT
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "RP-Participant Send Result Behavior Tree" ;
	bt:hasChild [
			a bt:Priority ;
			bt:hasChildren (
				[
					a bt:Sequence ;
					bt:hasChildren ( 
						:HandlePartSendResultGoal
						[
							a bt:Priority ;
							bt:hasChildren (
								:TimeoutReached
								[
									a bt:Sequence ;
									bt:hasChildren (
										:WriteThisAgentIdToEKB
										:WriteParticipantAddressesToEKB
										:InsertInitiatorAsReceiver
										:SendResultMessage
									)
								]
							)
						]
						:ClearEKB
					)
				]
				[
					a bt:Invert ;
					bt:hasChild 
						:ClearEKB
				]
			)
	] .

:ProduceRequestPrsInfoGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Goal to Request Personal Info" ;
	ajan:goal agents:InitiatorSendRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .						
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum .


							OPTIONAL {
								?bnode	mac:hasContent	?requestContent . 
				
								?requestContent	?predicate	?object .
							}
						}"""^^xsd:string ;
				] .

:ProduceInitiatorSendRequestGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Initiate Send Request Goal" ;
	ajan:goal agents:InitiatorSendRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasParticipants	?participantId ;
									mac:hasConversationId	?conversationId ;
									mac:hasReceiverCapability	?capability ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasQuorum	?quorum ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .
							#{
							#	BIND(BNODE() AS ?newBnode)
							#}

						}"""^^xsd:string ;
				] .

:ProduceInitiatorReceiveReplyGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Initiator Receives Request Response Goal" ;
	ajan:goal agents:InitiatorReceiveReplyGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .

:ProduceSendPrsInfoGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Send Personal Info Request Goal" ;
	ajan:goal agents:ParticipantSendResultGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>
	
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout ;
									mac:hasReceiverCapability	'participantResponse' ;
									mac:hasContent 	?bnode2 .

							?bnode2 	domain:hasGender 	?gender ;
										domain:hasNationality 	?nation ;
										domain:hasLanguage 	?lang .
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout .
							
							?bnode2 	rdf:type 	domain:DomainUser ;
										domain:hasGender 	?gender ;
										domain:hasNationality 	?nation ;
										domain:hasLanguage 	?lang .

							#?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
							#			ajan:agentId	?thisAgentId .

						}"""^^xsd:string ;
				] .
							


:ProduceHandlePrsInfoRequestGoal
	a bt:GoalProducer ;
	rdfs:label "Produce Handle Personal Info Request Goal" ;
	ajan:goal agents:ParticipantHandleRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasAgreement	'true' ;
									mac:hasReceiverCapability	'participantResponse' .
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout .


						}"""^^xsd:string ;
				] .


:ProducePartHandleRequestGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Participant Handle Request Goal" ;
	ajan:goal agents:ParticipantHandleRequestGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {
							?s ?p ?o .

							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasAgreement	'true' ;
									mac:hasReceiverCapability	'participantResponse' .
						}
						WHERE {
							?s ?p ?o .
							?bnode	rdf:type	mac:RequestMessage .
						}"""^^xsd:string ;
				] .


:ProducePartSendResultGoal
	a bt:GoalProducer ;
	rdfs:label "GoalProducer: Participant Send Result Goal" ;
	ajan:goal agents:ParticipantSendResultGoal ;
	bt:content [
					a bt:ConstructQuery ;
					bt:originBase ajan:ExecutionKnowledge;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						CONSTRUCT {

							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout ;
									mac:hasReceiverCapability	'participantResponse' ;
									mac:hasContent 	mac:DomainSpecificSubjectUri .

							mac:DomainSpecificSubjectUri 	rdf:type 	mac:ResponseContent ;
															ajan:hasLocation 	"DFKI" . 
						}
						WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?initiatorId ;
									mac:hasConversationId	?conversationId ;
									mac:hasTimeout	?timeout .
						}"""^^xsd:string ;
				] .

:Wait10Sec
	a bt:Wait ;
	rdfs:label "Wait 10 seconds" ;
	rdfs:comment "" ;
	bt:milliseconds "10000"^^xsd:int .

:Wait3Sec
	a bt:Wait ;
	rdfs:label "Wait 3 seconds" ;
	rdfs:comment "" ;
	bt:milliseconds "3000"^^xsd:int .


:HandlePrsInfoRequestEvent
	a bt:HandleEvent ;
	rdfs:label "Handle Personal Info Request event" ;
	bt:event agents:HandlePrsInfoRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .



:HandleStartCoordEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: handle Start Coordination event" ;
	bt:event agents:StartCoordEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:HandleReceiveRequestEvent
	a bt:HandleEvent ;
	rdfs:label "EventHandler: handle Custom Receive Request event" ;
	bt:event agents:ReceiveRequestEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}"""^^xsd:string ;
				] .

:InitiatorReceiveReplyGoalRunning
	a bt:Condition ;
	rdfs:label "Is Initiator Receive Reply Goal Running" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode 	rdf:type ajan:InitiatorReceiveReplyGoal ;
								ajan:hasStatus "Running" .
						}"""^^xsd:string ;
		] .



:ConditionSPO
	a bt:Condition ;
	rdfs:label "Condition: just a condition" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?s ?p ?o .
						}"""^^xsd:string ;
		] .

:NotificationNecessary
	a bt:Condition ;
	rdfs:label "Is Notification Necessary?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasNotificationNecessary	'true' .
						}"""^^xsd:string ;
		] .

:CurrentMacExists
	a bt:Condition ;
	rdfs:label "Any MAC exists to run Solver?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance .
						}"""^^xsd:string ;
		] .

:AgreedToPerformRequest
	a bt:Condition ;
	rdfs:label "Agree to perform Request?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?s ?p ?o .
						}"""^^xsd:string ;
		] .

:GoalSucceeded
	a bt:Condition ;
	rdfs:label "Did Goal succeed?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
														}"""^^xsd:string ;
		] .


:AgreementsReached
	a bt:Condition ;
	rdfs:label "Did enogh agents agree to Request?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {						
						{
							SELECT (COUNT( DISTINCT ?agreementBnode) AS ?agreementCount) ?quorum
							WHERE {
								?bnode	rdf:type	mac:Conversation ;
										mac:hasId	?conversationId ;
										mac:hasQuorum	?quorum .
								?agreementBnode	rdf:type mac:RequestAgreement ;
												mac:hasId	?conversationId .
							} GROUP BY ?quorum
						}
						FILTER (?agreementCount >= xsd:int(?quorum))

						}"""^^xsd:string ;
		] .

:QuorumReached
	a bt:Condition ;
	rdfs:label "Is Quorum reached?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					
					ASK 
					WHERE{
						
						{
							SELECT (COUNT( DISTINCT ?resultBnode) AS ?resultCount) ?quorum
							WHERE {
								?bnode	rdf:type	mac:Conversation ;
										mac:hasId	?conversationId ;
										mac:hasQuorum	?quorum .

								?resultBnode	rdf:type mac:RequestResult ;
												mac:hasId	?conversationId .
							}GROUP BY ?quorum
						}
						FILTER (?resultCount >= xsd:int(?quorum))
					}

				"""^^xsd:string ;
		] .

:TimeoutReached
	a bt:Condition ;
	rdfs:label "Is Timeout reached?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?bnode	rdf:type	mac:Conversation ;
						# !!! ATTENTION: timeout FORMAT MUST BE "yyyy-mm-ddThh:mm:ss"
								mac:hasTimeout	?timeout .

						BIND(NOW() AS ?now)
						BIND( (DAY(?now)*86400 + HOURS(?now)*3600 + MINUTES(?now)*60 + SECONDS(?now)) AS ?nowInSeconds)

						BIND( (DAY(xsd:dateTime(?timeout))*86400 + HOURS(xsd:dateTime(?timeout))*3600 + MINUTES(xsd:dateTime(?timeout))*60 + SECONDS(xsd:dateTime(?timeout))) AS ?timeoutInSeconds)

						FILTER(?timeoutInSeconds < ?nowInSeconds)
					}
					"""^^xsd:string ;
		] .



:SetQuorumReached
	a bt:Update ;
	rdfs:label "Add Quorum Reached Flag" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						mac:TemporaryQuorumSubject 	rdf:type 	?object .

					}
					INSERT{
						mac:TemporaryQuorumSubject 	rdf:type 	mac:QuorumReached .
					}
					WHERE{
						?s ?p ?o .
						OPTIONAL {
							mac:TemporaryQuorumSubject 	rdf:type 	?object .
						}
						
					}
					"""^^xsd:string ;
		] .

:UnnecessaryAgentProfileExists
	a bt:Condition ;
	rdfs:label "Unrelated Agent Profile Exists" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId .

						?bnode	rdf:type 	mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .

						FILTER(?macId != ?resultMacId)
					}
					"""^^xsd:string ;
		] .

:ConditionParticipants
	a bt:Condition ;
	rdfs:label "participants" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasParticipants	?part .
					}
					"""^^xsd:string ;
		] .


:ConditionNumberOfAgents
	a bt:Condition ;
	rdfs:label "number of agents" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasNumberOfAgents 	?n .
					}
					"""^^xsd:string ;
		] .


:ConditionId
	a bt:Condition ;
	rdfs:label "id" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasId 	?n .
					}
					"""^^xsd:string ;
		] .



:ConditionCoalitions
	a bt:Condition ;
	rdfs:label "coalitions" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						?macIns 	rdf:type 	mac:MACProblemInstance ;
									mac:hasFeasibleCoalitions 	?n .
					}
					"""^^xsd:string ;
		] .



:IsQuorumReached
	a bt:Condition ;
	rdfs:label "Is Quorum reached" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					ASK
					WHERE {
						mac:TemporaryQuorumSubject 	rdf:type 	mac:QuorumReached .
					}
					"""^^xsd:string ;
		] .

:SetTimeoutReached
	a bt:Update ;
	rdfs:label "Add Timeout Reached Flag" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						mac:TemporaryQuorumSubject 	rdf:type 	?object .

					}
					INSERT{
						mac:TemporaryQuorumSubject 	rdf:type 	mac:TimeoutReached .
					}
					WHERE{
						?s ?p ?o .
						OPTIONAL {
							mac:TemporaryQuorumSubject 	rdf:type 	?object .
						}
						
					}
					"""^^xsd:string ;
		] .

:InsertAgreedToRequest
	a bt:Update ;
	rdfs:label "Insert Agreed to Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasAgreement	'true' .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
					}
					"""^^xsd:string ;
		] .
		
:AddConversationToMacProblem
	a bt:Update ;
	rdfs:label "Add converation info to MAC Problem Instance" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?existingSbj	mac:hasConversation 	?conversationNode .

						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?convId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum .	
					}
					WHERE{
						?existingSbj	rdf:type	mac:MACProblemInstance .

						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?convId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum .	
					}
					"""^^xsd:string ;
		] .

:SetMacProblemRunning
	a bt:Update ;
	rdfs:label "Set MAC Problem Running" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Running" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:SetMacProblemCompleted
	a bt:Update ;
	rdfs:label "Set MAC Problem Completed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Completed" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:SetMacProblemFailed
	a bt:Update ;
	rdfs:label "Set MAC Problem Failed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?macProblemSbj	mac:hasStatus 	?macStatus .									
					}
					INSERT{
						?macProblemSbj	mac:hasStatus 	"Failed" .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance .
						OPTIONAL{
							?macProblemSbj	mac:hasStatus 	?macStatus .							
						}
					}
					"""^^xsd:string ;
		] .


:MakeMacProblemUnique
	a bt:Update ;
	rdfs:label "Assign Unique MAC Problem Subject" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?existingSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasMinPoints 	?minPoints ;
										mac:hasMinClusterSize 	?minClSize ;
										mac:hasQuorum 	?quorum .			
					}
					INSERT{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?uniqueId ;
										mac:hasNumberOfAgents ?numOfAgents ;
										mac:hasStartTime 	?startTime ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasMinPoints 	?minPoints ;
										mac:hasMinClusterSize 	?minClSize ;
										mac:hasQuorum 	?quorum .
					}
					WHERE{
						?existingSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .
						OPTIONAL {
							?existingSbj 	mac:hasMinPoints 	?minPoints ;
											mac:hasMinClusterSize 	?minClSize .
						}
						{
							SELECT (count(?pAgentId) as ?numOfAgents)
							WHERE {
									?bnode	rdf:type	mac:MACProblemInstance ;
											mac:hasParticipants	?pAgentId .
							}
						}
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:ProblemIRI), STR(?uniqueId))) AS ?macProblemSbj )
						}	
						BIND(NOW() as ?startTime) 
					}
					"""^^xsd:string ;
		] .

:InsertHandleRequestCapability
	a bt:Update ;
	rdfs:label "Insert handleCoordRequest Capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'handleCoordRequest' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .


:InsertMacStartedActivityToLog
	a bt:Update ;
	rdfs:label "Insert Mac Started Activity to Log" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						mac:LogActivity 	rdf:type 	mac:CurrentActivity ;
											mac:hasActivity 	?activity .
					}
					WHERE{
						?s 	?p 	?o .
						OPTIONAL {
							mac:LogActivity 	rdf:type 	mac:CurrentActivity ;
												mac:hasActivity 	?activity .
						}
					}
					"""^^xsd:string ;
		] .



:InsertAgentProfileInfoCapability
	a bt:Update ;
	rdfs:label "Insert Agent Profile Info Capability" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?subject 	mac:hasReceiverCapability 	?existingCapability .
					}
					INSERT{
						?subject	mac:hasReceiverCapability	'agentProfileInfoRequest' .
					}
					WHERE{
						?subject	rdf:type	mac:Conversation .

						OPTIONAL {
							?subject mac:hasReceiverCapability 	?existingCapability .
						}
					}
					"""^^xsd:string ;
		] .

:RemoveConversationContent
	a bt:Update ;
	rdfs:label "Remove Content of Conversation" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					DELETE {
					# remove previous content and add new content below
						?bnode	mac:hasContent 	?unnecessaryContent .					
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
						OPTIONAL {
							?bnode 	mac:hasContent 	?unnecessaryContent .
						}
					}
					"""^^xsd:string ;
		] .	

					
:InsertCoordinationResult
	a bt:Update ;
	rdfs:label "Insert Coord. Result" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					DELETE {
						?conversation 	mac:hasContent 	?previousContent .
						?macInstance 	rdf:type	mac:CurrentMACProblemInstance .
					}
					INSERT{
						?conversation	mac:hasContent ?macInstance, ?grouping, ?group.
					}
					WHERE{
						?macInstance 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
										mac:hasConversation 	?conversation .
						
						OPTIONAL {
							?macInstance 	mac:hasSolution 	?grouping . 
							?grouping 	mac:hasMembers 	?group .
						}

						#OPTIONAL {
						#	?group 	mac:hasMembers 	?memberAgentId .
						#}

						?conversation	rdf:type	mac:Conversation .

						OPTIONAL {
							?conversation 	mac:hasContent 	?previousContent .
						}			
					}
					"""^^xsd:string ;
		] .

:InsertBossAsSolverToMacProblem
a bt:Update ;
	rdfs:label "Insert BOSS as Solver to MAC Problem" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?macInstance 	mac:hasSolver 	"BOSS".
					}
					WHERE{
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .

:InsertHdbscanAsSolverToMacProblem
a bt:Update ;
	rdfs:label "Insert HDBSCAN as Solver to MAC Problem" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?macInstance 	mac:hasSolver 	"HDBSCAN".
					}
					WHERE{
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .


:InsertMacProblemInfoToConversation
	a bt:Update ;
	rdfs:label "Insert MAC problem Info to RequestMessage" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?macInstance .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
						?macInstance  	rdf:type 	mac:MACProblemInstance .
					}
					"""^^xsd:string ;
		] .

:InsertAgentProfileInfo
	a bt:Update ;
	rdfs:label "Insert Profile Info to RequestMessage" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>


					#DELETE {
					#	?bnode 	mac:hasContent 	?previousContent .
					#}
					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?personalInfoNode .

						?personalInfoNode 	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?agProf 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?personalInfoNode )
						}	
					}
					"""^^xsd:string ;
		] .

:AddDistancesToResultMessage
	a bt:Write ;
	rdfs:label "Add Distances to Conversation" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?distanceScoreIri .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasDistanceScore 	?distanceScoreIri .
						?distanceScoreIri 	rdf:type 	mac:DistanceScore ;
											mac:hasValue 	?minTotalDistance ;
											mac:isComputedBy	?thisAgentId ;
											mac:isComputedAgainst ?participantId ;
											mac:isComputedFor 	?macId .
					}
					"""^^xsd:string ;
		] .

:AddAgentProfileInfoToConv
	a bt:Write ;
	rdfs:label "Add Profile Info to Conversation" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>


					CONSTRUCT {
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent ?personalInfoNode .

						?personalInfoNode 	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .

						?agProf 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

						?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
									ajan:agentId	?thisAgentId .	
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?personalInfoNode )
						}	
					}
					"""^^xsd:string ;
		] .




:CreateThisAgentProfileInstance
	a bt:Update ;
	rdfs:label "Create This Agent Profile Info Instance" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						INSERT {
							?resultSbj	rdf:type 	mac:RequestResult ;
										mac:hasMacProblemId 	?macId ;
										mac:hasContent	?profileInfoIri .
								
							?profileInfoIri	rdf:type 	mac:AgentProfileInfo ;
											mac:belongsTo 	?thisAgentId ;
											domain:hasGender 	?gender ;
											domain:hasNationality 	?nation ;
											domain:hasLanguage 	?lang .
						}
						WHERE {
							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId .
							{
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
								BIND( IRI(CONCAT(STR(mac:AgentProfileInfo), STR(?uniqueId))) AS ?profileInfoIri )
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
							{
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId2)
								BIND( IRI(CONCAT(STR(mac:RequestResult), STR(?uniqueId2), STR("2"))) AS ?resultSbj )
							}
				} """^^xsd:string ;
	] .

:ComputeCannotLinks
	a bt:Write ;
	rdfs:label "Compute Cannot link connections" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						CONSTRUCT {
								?macInstance	mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?participantId1, ?participantId2 .
						}
						WHERE {
							{
								SELECT ?macInstance ?participantId1 ?participantId2 (SUM(?canSpeakSameLang) AS ?finalCanSpeakSameLang)
								WHERE{
									{
										SELECT ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
										WHERE{
											?macInstance	rdf:type	mac:MACProblemInstance ;
															mac:hasId 	?macId ;
															mac:hasParticipants 	?participantId1, ?participantId2 .
											FILTER(?participantId1 != ?participantId2)
											FILTER(?participantId1 < ?participantId2)

											?resultSbj1	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent1 .
								
											?resultContent1	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId1 ;
															domain:hasLanguage 	?language1 .
										
											?resultSbj2	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent2 .
								
											?resultContent2	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId2 ;
															domain:hasLanguage 	?language2 .

											BIND(IF(?language1 = ?language2, 1, 0) AS ?canSpeakSameLang)
										} GROUP BY ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
									}
								}GROUP BY ?macInstance ?participantId1 ?participantId2
							}
							FILTER(?finalCanSpeakSameLang=0)
							BIND(BNODE() AS ?cannotLinkBnode)
				} """^^xsd:string ;
	] .


:ComputeCannotLinks_UpdateNode
	a bt:Update ;
	rdfs:label "Compute Cannot link connections" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

						INSERT {
								?macInstance	mac:hasCannotLinkConnections	?cannotLinkBnode .

								?cannotLinkBnode	mac:hasCannotConnect	?participantId1, ?participantId2 .
						}
						WHERE {
							{
								SELECT ?macInstance ?participantId1 ?participantId2 (SUM(?canSpeakSameLang) AS ?finalCanSpeakSameLang)
								WHERE{
									{
										SELECT ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
										WHERE{
											?macInstance	rdf:type	mac:MACProblemInstance ;
															mac:hasId 	?macId ;
															mac:hasParticipants 	?participantId1, ?participantId2 .
											FILTER(?participantId1 != ?participantId2)
											FILTER(?participantId1 < ?participantId2)

											?resultSbj1	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent1 .
								
											?resultContent1	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId1 ;
															domain:hasLanguage 	?language1 .
										
											?resultSbj2	rdf:type 	mac:RequestResult ;
														mac:hasMacProblemId 	?macId ;
														mac:hasContent	?resultContent2 .
								
											?resultContent2	rdf:type 	mac:AgentProfileInfo ;
															mac:belongsTo 	?participantId2 ;
															domain:hasLanguage 	?language2 .

											BIND(IF(?language1 = ?language2, 1, 0) AS ?canSpeakSameLang)
										} GROUP BY ?macInstance ?participantId1 ?participantId2 ?canSpeakSameLang
									}
								}GROUP BY ?macInstance ?participantId1 ?participantId2
							}
							FILTER(?finalCanSpeakSameLang=0)
							BIND(BNODE() AS ?cannotLinkBnode)
				} """^^xsd:string ;
	] .


:GenerateCoalitions
	a bt:CoalitionGenerator ;
	rdfs:label "Generate Coalitions" ;
	bt:query [
				a bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:targetBase ajan:ExecutionKnowledge ;
				bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					Construct {
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasId	?macId ;
										mac:hasParticipants	?participantId ;
										mac:hasNumberOfAgents	?numOfAgents ;
										mac:hasMinCoalitionSize	"1" ;
										mac:hasMaxCoalitionSize	?numOfAgents ;
										mac:hasCannotLinkConnections	?cannotLinkBnode ;
										mac:hasMustLinkConnections	?mustLinkBnode .

						?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
					}
					Where{
						?macInstance	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasParticipants 	?participantId ;
										mac:hasNumberOfAgents 	?numOfAgents .

						OPTIONAL {
							?macInstance 	mac:hasCannotLinkConnections	?cannotLinkBnode .

							?cannotLinkBnode	mac:hasCannotConnect	?clAgentId, ?clAgentId2 .
						}
						OPTIONAL {
							?bnode 	mac:hasMustLinkConnections	?mustLinkBnode .

							?mustLinkBnode	mac:hasMustConnect	?mlAgentId, ?mlAgentId2 .
						}
					}
					"""^^xsd:string ;
			] .



:RemoveUnnecessaryAgentProfiles
	a bt:Update ;
	rdfs:label "Delete Unrelated Agent Profiles from EKB" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .

						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId .

						?bnode	rdf:type 	mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?resultMacId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .

						FILTER(?macId != ?resultMacId)
					}
					"""^^xsd:string ;
		] .


:GenerateNewConvInstance
	a bt:Update ;
	rdfs:label "Create Unique Conversation Id" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?existingConv 	rdf:type 	mac:Conversation ;
										?existingConvPred 	?existingConvObj .
					}
					INSERT{
						?conversationNode	rdf:type 	mac:Conversation ;
											mac:hasId 	?uniqueId ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasParticipants 	?participantId ;
											mac:hasNotificationNecessary	?notificationNecessary ;
											mac:hasTimeout	?timeout ;
											mac:hasQuorum 	?quorum ;
											mac:hasMacProblemId 	?macId .
					}
					WHERE{
						?macProblemSbj	rdf:type	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasUseCase 	?useCaseTitle ;
										mac:hasParticipants 	?participantId ;
										mac:hasNotificationNecessary 	?notificationNecessary ;
										mac:hasTimeout 	?timeout ;
										mac:hasQuorum 	?quorum .

						OPTIONAL {
							?existingConv 	rdf:type 	mac:Conversation ;
											?existingConvPred 	?existingConvObj .
						}
						{
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:Conversation), STR(?uniqueId))) AS ?conversationNode )
						}

					}
					"""^^xsd:string ;
		] .



:InsertInitiatorAsReceiver
	a bt:Update ;
	rdfs:label "Insert Initiator as Result Receiver" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?bnode 	mac:hasReceiver 	?receiverId .
					}
					INSERT{
						?bnode	mac:hasReceiver	?initiatorId .
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasInitiator 	?initiatorId .
						OPTIONAL{
							?bnode 	mac:hasReceiver 	?receiverId .
						}
					}
					"""^^xsd:string ;
		] .

:ComputeCoordinationRuntime
	a bt:Update ;
	rdfs:label "Compute Runtime of Coordination" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				INSERT {
					?macStatus	mac:hasRuntime	?coordinationRuntimeInSeconds .
				}
				WHERE{
					?macStatus 	rdf:type 	mac:MACProblemInstance, mac:CurrentMACProblemInstance ;
								mac:hasStartTime 	?startTime .

					BIND(NOW() as ?endTime)


					BIND( (DAY(?startTime)*86400 + HOURS(?startTime)*3600 + MINUTES(?startTime)*60 + SECONDS(?startTime)) AS ?startTimeInSeconds)
					BIND( (DAY(?endTime)*86400 + HOURS(?endTime)*3600 + MINUTES(?endTime)*60 + SECONDS(?endTime)) AS ?endTimeInSeconds)
					BIND( ?endTimeInSeconds - ?startTimeInSeconds AS ?coordinationRuntimeInSeconds)
				}
					"""^^xsd:string ;
		] .


:InsertParticipantsAsReceivers
	a bt:Update ;
	rdfs:label "Insert Participants as Receivers" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?bnode 	mac:hasReceiver 	?receiverId .
					}
					INSERT{
						?bnode	mac:hasReceiver	?participantId .
					}
					WHERE{
#						{
#							SELECT DISTINCT ?participantId 
#							WHERE{
								?bnode	rdf:type	mac:Conversation ;
										mac:hasParticipants 	?participantId .
								?thisAgentIRI 	rdf:type 	ajan:Agent, ajan:ThisAgent ;
												ajan:agentId 	?thisAgentId .
								FILTER(?participantId != ?thisAgentId)
#							}
#						}
						OPTIONAL{
							?bnode 	mac:hasReceiver 	?receiverId .
						}
					}
					"""^^xsd:string ;
		] .	


:InsertDefaultResponseCapability
	a bt:Update ;
	rdfs:label "Insert Capability of Initiator" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE{
						?currentActiveConv 	mac:hasReceiverCapability 	?capability .
					}
					INSERT{
						?currentActiveConv	mac:hasReceiverCapability	'receiveCoordRequestResponse' .
					}
					WHERE{
						?currentActiveConv	rdf:type	mac:Conversation .

						OPTIONAL{
							?bnode 	mac:hasReceiverCapability 	?capability .
						}
					}
					"""^^xsd:string ;
		] .	

:InsertRequestResult
	a bt:Update ;
	rdfs:label "Insert Result of Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:Conversation ;
								mac:hasContent 	mac:DomainSpecificSubjectUri .

						mac:DomainSpecificSubjectUri 	rdf:type 	mac:ResponseContent ;
															ajan:hasLocation 	"DFKI" . 
					}
					WHERE{
						?bnode	rdf:type	mac:Conversation .
					}
					"""^^xsd:string ;
		] .


:InsertRequiredTriples
	a bt:Update ;
	rdfs:label "Insert Required Triples to Handle Request" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>


					INSERT{
						?bnode	rdf:type	mac:RequestMessage ;
								mac:hasAgreement	'true' ;
								mac:hasReceiverCapability	'receiveCoordRequestResponse' .
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
						?bnode	rdf:type	mac:RequestMessage .
					}
					"""^^xsd:string ;
		] .


:SetInitiatorReceiveReplyGoalRunning
	a bt:Update ;
	rdfs:label "Set Initiator Receive Reply Goal Running" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	?status .
					}
					INSERT{
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	"Running" .
					}
					WHERE{
						?s ?p ?o .

						OPTIONAL {
							ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
														ajan:hasStatus 	?status .
						}
					}
					"""^^xsd:string ;
		] .

:SetInitiatorReceiveReplyGoalCompleted
	a bt:Update ;
	rdfs:label "Set Initiator Receive Reply Goal Completed" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						ajan:TemporaryGoalStatus	ajan:hasStatus 	?status .
					}
					INSERT{
						ajan:TemporaryGoalStatus	ajan:hasStatus 	"Completed" .
					}
					WHERE{
						ajan:TemporaryGoalStatus	rdf:type ajan:InitiatorReceiveReplyGoal ;
													ajan:hasStatus 	?status .
					}
					"""^^xsd:string ;
		] .


:SetGoalCompleted
	a bt:Update ;
	rdfs:label "Update Goal status to Complete" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					DELETE {
						?bNode	ajan:hasStatus	?status .
					}
					INSERT{
						?bNode	rdf:type	ajan:GoalStatus ;
								ajan:hasStatus	"Completed" .
					}
					WHERE{
						?bNode	rdf:type	ajan:GoalStatus ;
								ajan:hasStatus	?status .
					}
					"""^^xsd:string ;
		] .

:GenerateGoalUid
	a bt:Update ;
	rdfs:label "Generate Unique Goal ID to manage Goal status" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					INSERT{
						_:bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	"Running" .
					}
					WHERE{
						BIND(SHA1(xsd:string(NOW())) AS ?goalId)
					}
					"""^^xsd:string ;
		] .



:HandleReceiveResponseEvent
	a bt:HandleQueueEvent ;
	rdfs:label "Handle Receive Response Event" ;
	bt:event agents:ReceiveParticipantReplyEvent ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
					"""^^xsd:string ;
				] .

:HandleInitSendRequestGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Initiator Send Request Goal" ;
	bt:event agents:InitiatorSendRequestGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						#_:bnode	rdf:type	ajan:GoalStatus ;
						#		ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
					}
					"""^^xsd:string ;
				] .



:WriteRunningMacDistancesToEKB
	a bt:Write ;
	rdfs:label "Write Distance Score to EKB" ;
	rdfs:comment "Write Distance Scores of the Running MAC Problem to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge  ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?macInstance 	mac:hasId 	?macId ;
										mac:hasStatus ?macStatus ;
										mac:hasDistanceScore 	?distanceIri .

						?distanceIri 	rdf:type 	mac:DistanceScore ;
										mac:isComputedFor 	?macId ;
										mac:hasValue 	?minTotalDistance ;
										mac:isComputedBy	?thisAgentId ;
										mac:isComputedAgainst ?participantId .
					}
					WHERE {
						?macInstance 	rdf:type 	mac:MACProblemInstance ;
										mac:hasId 	?macId ;
										mac:hasStatus ?macStatus .
						FILTER(LCASE(?macStatus) = "running")
						?distanceIri 	rdf:type 	mac:DistanceScore ;
										mac:isComputedFor 	?macId ;
										mac:hasValue 	?minTotalDistance ;
										mac:isComputedBy	?thisAgentId ;
										mac:isComputedAgainst ?participantId .
					}
		"""^^xsd:string ;
	] .





:WriteAgentProfileInfo
	a bt:Write ;
	rdfs:label "Write Profile Info to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
						}
					WHERE {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

							}
		"""^^xsd:string ;
	] .

:QueryPrsInfo
	a bt:Write ;
	rdfs:label "Write Personal Info to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>

					CONSTRUCT {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .
						}
					WHERE {
							?bnode 	rdf:type 	domain:DomainUser ;
									domain:hasGender 	?gender ;
									domain:hasNationality 	?nation ;
									domain:hasLanguage 	?lang .

							}
		"""^^xsd:string ;
	] .

:SaveMacProblem
	a bt:Write ;
	rdfs:label "Save MAC Problem Instance to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasStatus 	?macStatus ;
											mac:hasId 	?id ;
											mac:hasNumberOfAgents ?numOfAgents ;
											mac:hasParticipants 	?participantId ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasNotificationNecessary 	?notificationNecessary ;
											mac:hasTimeout 	?timeout ;
											mac:hasQuorum 	?quorum ;
											mac:hasConversation 	?conversation ;
											?macPred 	?macObj ;
											mac:hasSolution	?grouping ;
											mac:hasSolver ?solver ;
											mac:hasCannotLinkConnections ?cannotConnection ;
											mac:hasMinCsValue ?minCsValue ;
											mac:hasDistanceScore 	?distanceIri ;
											mac:hasReciprocalScore 	?rrsBnode ;
											mac:hasMinPoints    ?minPoints ;
											mac:hasFeasibleCoalitions 	?feasibleCoalition ;
											mac:hasRuntime ?runtime ;
									        mac:hasMinClusterSize   ?minClSize .
							?feasibleCoalition		?fCoalPred 	?fCoalObj .

							?grouping		mac:hasMembers	?group ;
											?groupingPred 	?groupingObj .

							?group 		?groupPred 		?groupObj .

							?conversation 	?predicate 	?obj .
							?rrsBnode 	?rrsPred 	?rrsObj .
								
	
							?cannotConnection 	?clPred 	?clObj .
							?distanceIri 	?distPred 	?distObj .

						}
					WHERE {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasUseCase 	?useCaseTitle ;
											mac:hasStatus 	?macStatus ;
											mac:hasId 	?id ;
											mac:hasNumberOfAgents ?numOfAgents ;
											mac:hasParticipants 	?participantId .

							OPTIONAL {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasId 	?id ;
											mac:hasSolver ?solver .
							}
							OPTIONAL {
							?existingSbj	rdf:type	mac:MACProblemInstance ;
											mac:hasId 	?id ;
											mac:hasRuntime ?runtime .
							}
					#		OPTIONAL {
					#			?existingSbj	mac:hasUseCase 	?useCaseTitle .
					#		}				
					#		OPTIONAL {
					#			?existingSbj	mac:hasNotificationNecessary 	?notificationNecessary .
					#		}
					#		OPTIONAL {
					#			?existingSbj	mac:hasTimeout 	?timeout .
					#		}
					#		OPTIONAL {
					#			?existingSbj	mac:hasQuorum 	?quorum .
					#		}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasConversation 	?conversation .
								?conversation 	?predicate 	?obj .
							}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												?macPred 	?macObj .
								FILTER(?macObj != mac:CurrentMACProblemInstance)
							}

							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasSolution	?grouping .
								?grouping		mac:hasMembers	?group .
								?grouping 	?groupingPred 	?groupingObj .
								?group 		?groupPred 		?groupObj .
							}
							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasFeasibleCoalitions	?feasibleCoalition .
								?feasibleCoalition		?fCoalPred 	?fCoalObj .
							}
					#		OPTIONAL{
					#			?existingSbj	mac:hasMinCsValue ?minCsValue .
					#		}
					#		OPTIONAL{
					#			?grouping	mac:hasSolutionOf	?existingSbj ;
					#						mac:hasMembers	?group .
					#		}
					#		OPTIONAL{
					#			?grouping	mac:hasValue	?csValue ;
					#						mac:hasRank		?csRank .
					#		}
							OPTIONAL{
								?existingSbj	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasCannotLinkConnections	?cannotConnection .
								?cannotConnection 	?clPred 	?clObj .
							}
							OPTIONAL {
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasDistanceScore 	?distanceIri .
								?distanceIri 	?distPred 	?distObj .
							}
							OPTIONAL{
								?existingSbj 	rdf:type	mac:MACProblemInstance ;
												mac:hasId 	?id ;
												mac:hasReciprocalScore 	?rrsBnode .
								?rrsBnode 	?rrsPred 	?rrsObj .
							}
							#OPTIONAL {
							#	?existingSbj 	mac:hasMinPoints    ?minPoints ;
							#		        	mac:hasMinClusterSize   ?minClSize .
							#}
						}
		"""^^xsd:string ;
	] .


:SaveRequest
	a bt:Write ;
	rdfs:label "Write Request of Initiator to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasInitiator	?thisAgentId ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasContent	?requestContent .

							?requestContent	?predicate	?object .
						}
					WHERE {
							?bnode	rdf:type	mac:RequestMessage ;
									mac:hasConversationId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout .

							OPTIONAL {
								?bnode 	mac:hasContent	?requestContent .
								?requestContent	?predicate	?object .
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							}
		"""^^xsd:string ;
	] .

				
:SaveAllToAKB
	a bt:Write ;
	rdfs:label "Write All to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

				
:SaveResponse
	a bt:Write ;
	rdfs:label "Save Participant Response to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?bnode	rdf:type	mac:RequestResponse, ?responseType ;
								mac:hasParticipants	?senderId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasUseCase 	?useCase ;
								mac:hasId	?conversationId .
						?bnode	mac:hasContent	?resultContent .
						?resultContent	?predicate	?object .
						
					}
					WHERE {

						?bnode	rdf:type	mac:RequestResponse, ?responseType ;
								mac:hasParticipants	?senderId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasId	?conversationId .
						FILTER(?responseType != mac:RequestResponse)

						OPTIONAL {
							?bnode	mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
						}
						OPTIONAL {
							?bnode	rdf:type	mac:RequestResponse;
									mac:hasUseCase	?useCase .
						}
					}
		"""^^xsd:string ;
	] .


:WriteUidToAKB
	a bt:Write ;
	rdfs:label "Write Goal ID to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {					
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
					}
					WHERE {
						?bnode	rdf:type	ajan:GoalStatus ;
								ajan:hasGoalId	?goalId ? 
								ajan:hasStatus	?status .
					}
		"""^^xsd:string ;
	] .


:WriteParticipantAddressesToEKB
	a bt:Write ;
	rdfs:label "Write Addresses of participants from LAR to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agentUri	ajan:agentId	?agentId ;
									ajan:hasAddress	?address .
					}
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId ;
									ajan:hasAddress	?address .
					}
		"""^^xsd:string ;
	] .

:ClearLSR
	a bt:Update ;
	rdfs:label "Clear LSR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>

					DELETE{
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
					}
					"""^^xsd:string ;
		] .

:WriteSomethingToLSR
	a bt:Write ;
	rdfs:label "Write something to LSR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>		
					CONSTRUCT {
						ajan:Subject 	ajan:predicate 	ajan:object .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

:WriteEverythingToLSR
	a bt:Write ;
	rdfs:label "Write everything to LSR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:LocalServicesKnowledge ;
		bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .

:WriteEverythingToAKB
	a bt:Write ;
	rdfs:label "Write everything to AKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
					CONSTRUCT {
						?s ?p ?o .
					}
					WHERE {
						?s ?p ?o .
					}
		"""^^xsd:string ;
	] .



:GetAgentPreferences
	a bt:Write ;
	rdfs:label "Write agent preferences to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
				PREFIX domain: <http://localhost:8090/rdf4j/repositories/domain_specific_ontology#>	
				
				CONSTRUCT  {
					?newNode	rdf:type	mac:AgentPreferences ;
								domain:hasGenderPreference 	?genderPref ;
								domain:hasNationPreference 	?nationPref ;
								domain:hasGenderPrefWeight 	?genPrefWeight ;
								domain:hasNationPrefWeight 	?natPrefWeight .
				}
				WHERE {
					?bnode 	rdf:type 	domain:DomainUser ;
							domain:hasGenderPreference 	?genderPref ;
							domain:hasNationPreference 	?nationPref ;
							domain:hasGenderPrefWeight 	?genPrefWeight ;
							domain:hasNationPrefWeight 	?natPrefWeight .
							
					{
						BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
						BIND( IRI(CONCAT(STR(mac:AgentPreferences), STR(?uniqueId))) AS ?newNode )
					}

				} """^^xsd:string ;
	] .






:WriteAgentProfilesToEKB
	a bt:Write ;
	rdfs:label "Write All Received Agent Profiles to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					CONSTRUCT {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasContent	?resultContent .
								
						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
					WHERE {
						?bnode	rdf:type mac:RequestResult ;
								mac:hasId	?convId ;
								mac:hasMacProblemId 	?macId ;
								mac:hasContent	?resultContent .

						?resultContent	rdf:type 	mac:AgentProfileInfo ;
										?predicate	?object .
					}
		"""^^xsd:string ;
	] .


:GetResponses
	a bt:Write ;
	rdfs:label "Write Responses of Participants to EKB" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?bnode	rdf:type mac:RequestResponse, ?responseType ;
								mac:hasId	?convId ;
								mac:hasParticipants		?senderId .
						
						?bnode	mac:hasContent	?resultContent .
						?resultContent	?predicate	?object .
					}
					WHERE {

						?bnode	rdf:type 	mac:RequestResponse, ?responseType ;
								mac:hasId	?convId ;
								mac:hasParticipants		?senderId .
						FILTER(?responseType = mac:RequestResult || ?responseType = mac:RequestAgreement || ?responseType = mac:RequestRefusal)

						#OPTIONAL {
						#	?bnode	mac:hasContent	?resultContent .
						#	?resultContent	?predicate	?object .
						#}
					}
		"""^^xsd:string ;
	] .

:MessageToParticipants
	a bt:Broadcast ;
	rdfs:label "Send Request Messages to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """

						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?thisAgentId ;
									mac:hasId	?conversationId ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasUseCase 	?useCaseTitle ;
									mac:hasMacProblemId 	?macId ;
									mac:hasContent	?requestContent .
							?requestContent	?predicate	?object .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasId	?conversationId ;
									mac:hasUseCase 	?useCaseTitle ;
									mac:hasNotificationNecessary	?notifNecessary ;
									mac:hasTimeout	?timeout ;
									mac:hasMacProblemId 	?macId .
							OPTIONAL {
								?bnode 	mac:hasContent	?requestContent .
								?requestContent	?predicate	?object .
							}
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasParticipants	?participantId ;
									mac:hasReceiverCapability	?capability .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							FILTER(?participantId != ?thisAgentId)
							?partAgentUri	ajan:agentId	?participantId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?capability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:LOGStartedCoordination
	a bt:Message ;
	rdfs:label "LOG-Started Coordination"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasUseCase 	?useCase .



							OPTIONAL{
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasId 	?macId ;
												mac:hasTimeout 	?timeout ;
												mac:hasQuorum 	?quorum .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}						
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?macInstance 	rdf:type 	mac:MACProblemInstance ;
													mac:hasParticipants 	?participantId .
								}
							}
							BIND(CONCAT("Started Coordination\\nMac ID: ", STR(?macId), "\\nParticipants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum)) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSentRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Coordination Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Coordination Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)

							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGSentUtilitiesRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Utilities Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}
							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Compute Utilities Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)


							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGSentProfileInfoRequestToParticipants
	a bt:Message ;
	rdfs:label "LOG-Sent Profile Info Request to Participants"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Sent Profile Info Request To Participants\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)

							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedAgentProfileInfoRequest	
	a bt:Message ;
	rdfs:label "LOG-Received Agent Profile Info Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received Agent Profile Info Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGReceivedUtilitiesRequest
	a bt:Message ;
	rdfs:label "LOG-Received Utilities Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received UTILITIES Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGReceivedCoordinationRequest
	a bt:Message ;
	rdfs:label "LOG-Received Coordination Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}

							BIND(CONCAT("Received Coordination Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGAgreedToRequest
	a bt:Message ;
	rdfs:label "LOG-Agreed to Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
											#	mac:hasTimeout 	?timeout ;
											#	mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							BIND(CONCAT("Sent AGREED to the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGRefusedRequest
	a bt:Message ;
	rdfs:label "LOG-Refused Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
								#				mac:hasTimeout 	?timeout ;
								#				mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}

							BIND(CONCAT("Sent REFUSED the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGFinalizeCoordination
	a bt:Message ;
	rdfs:label "LOG-Finalize Coordination"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasStatus 	?macStatus ;
											mac:hasUseCase 	?useCase .

							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}

	
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	

							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}
							{
								SELECT ?groupingResultStr
								WHERE {
									{
										SELECT (GROUP_CONCAT(?groupingStr ; separator="], [") AS ?finalStr)
										WHERE {
											{
												SELECT ?grouping (GROUP_CONCAT(?groupString ; separator=", ") AS ?groupingStr)
												WHERE {
													{
														SELECT ?group ?grouping (GROUP_CONCAT(?memberAgentId ; separator=", ") AS ?groupStr)
														WHERE{
															?macInstance	rdf:type	mac:MACProblemInstance ;
																			mac:hasId 	?id ;
																			mac:hasSolution	?grouping .
															?grouping		mac:hasMembers	?group .
															?group 		mac:hasMembers 		?memberAgentId .
														} GROUP BY ?group ?grouping 
													}
													BIND(CONCAT("[", STR(?groupStr), "]") AS ?groupString)
												}GROUP BY ?grouping
											}
										}
									}
									BIND(CONCAT("[", STR(?finalStr), "]") AS ?groupingResultStr)
								}
							}


							BIND(CONCAT("Finalize Coordination\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nMAC Status: ", ?macStatus, "\\nContent IRIs: ", ?contentIris, "\\nSolution: ", ?groupingResultStr) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGResultOfRequest
	a bt:Message ;
	rdfs:label "LOG-Sent Result of Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .
							#OPTIONAL {
							#	?conversation 	rdf:type 	mac:Conversation ;
							#					mac:hasContent 	?content .
							#	?content 	rdf:type 	mac:MACProblemInstance ;
							#				mac:hasUseCase 	?useCase .
							#}
							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Sent RESULT of the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nTimeout: ",STR(?timeout), "\\nNotification Necessary: ", ?notificationNecessary, "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGSavedRequestResponse
	a bt:Message ;
	rdfs:label "LOG-Save Response of Request"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							OPTIONAL{
								?response 	rdf:type 	mac:RequestResponse ;
											mac:hasId 	?convId ;
											mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL{
								?response 	rdf:type 	mac:RequestResponse ;
											mac:hasUseCase 	?useCase .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							{
								SELECT (GROUP_CONCAT(?participantId ; separator=", ") AS ?participants)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasParticipants 	?participantId .
								}
							}


							{
								SELECT (GROUP_CONCAT(?contentIri ; separator=", ") AS ?contentIris)
								WHERE{
									?conversation 	rdf:type 	mac:Conversation ;
													mac:hasContent 	?contentIri .
								}
							}


							BIND(CONCAT("Save RESPONSE of the Request\\nConversation ID: ", STR(?convId), "\\nConversation Participants: ",STR(?participants), "\\nMAC ID: ", ?macId, "\\nContent IRIs: ", ?contentIris) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGCurrentEkb
	a bt:Message ;
	rdfs:label "LOG-Current EKB"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Current EKB\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:LOGQuorumReached
	a bt:Message ;
	rdfs:label "LOG-Quorum Reached"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Quorum Reached\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .


:LOGTimeoutReached
	a bt:Message ;
	rdfs:label "LOG-Timeout Reached"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newBnode	rdf:type 	mac:Log ;
										mac:hasAgentId	?thisAgentId ;
										mac:hasUseCase 	?useCase ;
										mac:hasSolver 	?solver ;
										mac:hasActivity		?activity ;
										mac:hasActivityStatus		?activityStatus .
						}
						WHERE {
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .

							?macInstance 	rdf:type 	mac:MACProblemInstance ;
											mac:hasId 	?macId ;
											mac:hasUseCase 	?useCase .

							OPTIONAL{
								?conversation 	rdf:type 	mac:Conversation ;
												mac:hasId 	?convId ;
												mac:hasTimeout 	?timeout ;
												mac:hasNotificationNecessary	?notificationNecessary ;
												mac:hasQuorum 	?quorum ;
												mac:hasMacProblemId 	?macId .
							}	
							OPTIONAL {
								?macInstance 	rdf:type 	mac:MACProblemInstance ;
												mac:hasSolver 	?solver .
							}
							BIND(CONCAT("Timeout Reached\\nConversation ID: ", STR(?convId), "\\nTimeout: ",STR(?timeout), "\\nQuorum: ", STR(?quorum), "\\nMAC ID: ", ?macId) AS ?activity)
							BIND("Succes" AS ?activityStatus)

							{			
								BIND(BNODE() as ?newBnode)
							}
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							OPTIONAL {
								mac:MajanLogging 	mac:hasUri 	?storedUri .
							}
							BIND(IF(BOUND(?storedUri), ?storedUri, "http://localhost:4202/post") AS ?requestURI)
					}"""^^xsd:string
	] .

:AgreedMessageToInitiator
	a bt:Message ;
	rdfs:label "Send Participant agrees"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newNode	rdf:type mac:RequestAgreement, mac:RequestResponse ;
										mac:hasUseCase 	?useCase ;
										mac:hasId	?conversationId ;
										mac:hasMacProblemId 	?macId ;
										mac:hasParticipants		?thisAgentId .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasUseCase 	?useCase ;
									mac:hasMacProblemId 	?macId ;
									mac:hasId	?conversationId .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:RequestAgreement), STR(?uniqueId))) AS ?newNode )
						}
							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?initiatorId ;
									mac:hasReceiverCapability ?initiatorCapability.

							?initAgentUri	ajan:agentId	?initAgentId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?initiatorCapability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:RefusedMessageToInitiator
	a bt:Message ;
	rdfs:label "Send Participant refuses"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {

							?newNode	rdf:type mac:RequestRefusal, mac:RequestResponse ;
										mac:hasConversationId	?conversationId ;
										mac:hasUseCase 	?useCase ;
										mac:hasMacProblemId 	?macId ;
										mac:hasParticipants		?thisAgentId .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasUseCase 	?useCase ;
									mac:hasMacProblemId 	?macId ;
									mac:hasId	?conversationId .

							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
							BIND( IRI(CONCAT(STR(mac:RequestRefusal), STR(?uniqueId))) AS ?newNode )
							}


							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasInitiator	?initiatorId ;
									mac:hasReceiverCapability ?initiatorCapability.

							?initAgentUri	rdf:type	ajan:Agent ;
											ajan:agentId	?initAgentId ;
											ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?initiatorCapability) AS ?requestURI)

					}"""^^xsd:string
	] .



:SendResultMessage
	a bt:Broadcast ;
	rdfs:label "Send Participant Result"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

						CONSTRUCT {
							?newNode	rdf:type	mac:RequestResult, mac:RequestResponse ;
										mac:hasId	?convId ;
										mac:hasParticipants		?thisAgentId ;
										mac:hasMacProblemId 	?macId ;
										mac:hasUseCase 	?useCase ;
										mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
						}
						WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasMacProblemId 	?macId ;
									mac:hasUseCase 	?useCase ;
									mac:hasId	?convId ;
									mac:hasContent	?resultContent .
							?resultContent	?predicate	?object .
							?thisAgent	rdf:type	ajan:Agent, ajan:ThisAgent ;
										ajan:agentId	?thisAgentId .
							{			
								BIND(SHA1(xsd:string(NOW())) AS ?uniqueId)
								BIND( IRI(CONCAT(STR(mac:RequestResult), STR(?uniqueId))) AS ?newNode )
							}}

							"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>

					SELECT DISTINCT ?requestURI
					WHERE {
							?bnode	rdf:type	mac:Conversation ;
									mac:hasReceiver	?receiverId ;
									mac:hasReceiverCapability ?receiverCapability.

							?receiverAgentIRI	ajan:agentId	?receiverId ;
												ajan:hasAddress	?address .
							BIND(CONCAT(?address, "?capability=", ?receiverCapability) AS ?requestURI)
					}
					"""^^xsd:string
	] .

:HandlePartRequestGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Participant Handle Request Goal" ;
	bt:event agents:ParticipantHandleRequestGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					#	_:bnode	rdf:type	ajan:GoalStatus ;
					#			ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .

:HandleInitReceiveReplyGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Initiator Receive Reply Goal" ;
	bt:event agents:InitiatorReceiveReplyGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
						#_:bnode	rdf:type	ajan:GoalStatus ;
						#		ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .

:HandlePartSendResultGoal
	a bt:HandleEvent ;
	rdfs:label "GoalHandler: Participant Send Result Goal" ;
	bt:event agents:ParticipantSendResultGoal ;
	bt:validate [
			a bt:ConstructQuery ;
			bt:targetBase ajan:ExecutionKnowledge ;
			bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?s ?p ?o .
					#	_:bnode	rdf:type	ajan:GoalStatus ;
					#			ajan:hasStatus	"Running" .
					}
					WHERE {
						?s ?p ?o .
						}
					"""^^xsd:string ;
				] .
# ----------- MAJAN BTs -----------


#------------MAJAN Stuff----------------------


:SimpleSuccess
	a bt:Success ;
	rdfs:label "Just Success Node"^^xsd:string .






:WriteAgentAddressesToEKB
	a bt:Insert ;
	rdfs:label "Insert: Addresses of other agents from LAR to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
					PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
					CONSTRUCT {
						?agentUri	ajan:agentId	?agentId ;
									welcome:hasAddress	?address .
					}
					WHERE {
						?agentUri	rdf:type	ajan:Agent ;
									ajan:agentId	?agentId ;
									welcome-sw:hasAddress	?address .
					}
		"""^^xsd:string ;
	] .




:ClearEKB
	a bt:Update ;
	rdfs:label "Clear EKB" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					DELETE{
						?s ?p ?o .
					}
					WHERE{
						?s ?p ?o .
					}
					"""^^xsd:string ;
		] .






#---------------MAJAN BT Nodes---------------








:WriteThisAgentIdToEKB
	a bt:Write ;
	rdfs:label "Write: ID of agent to Execution" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:targetBase ajan:ExecutionKnowledge ;
		bt:sparql """
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			CONSTRUCT  {
				?agentUri	rdf:type	ajan:Agent, ajan:ThisAgent ;
							ajan:agentId	?agentName .
			}
			WHERE {
				?agentUri	rdf:type	ajan:Agent ;
							ajan:agentId	?agentName .
			} """^^xsd:string ;
	] .


:Message2WPMUpdateStatus2InCoordination
	a bt:Message ;
	rdfs:label "Message: Update Agent status to In_Coordination in WAR"^^xsd:string ;
	rdfs:comment ""^^xsd:string ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> 
				SELECT ?hdrName ?fieldValue
				WHERE {	
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
						
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "application/ld+json"^^xsd:string
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "application/ld+json"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:to ;
					http-core:fieldValue "WPM"
			]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:ExecutionKnowledge ;
				bt:sparql """
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>
						PREFIX welcome-sw: <http://www.semanticweb.org/welcome#>
						CONSTRUCT {
							?agent	welcome:hasStatus welcome-sw:in_coordination ;
									ajan:agentId	?agentName .
						}
						WHERE {
							?agent	rdf:type ajan:Agent ;
									ajan:agentId	?agentName .
						}"""^^xsd:string
			]
		] ;
	] ;
	bt:queryUri [
		a bt:SelectQuery ;
		a bt:QueryUri ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

					SELECT ?requestURI
					WHERE {
					# LINE TO SEND TO DUMMY ENDPOINT
						VALUES ?requestURI { "http://localhost:8092/wpm/updateAgentStatus" }
					
					# LINES TO SEND TO ACTUAL ENDPOINT
					#	welcome:dispatcher welcome:hasAddress ?partialAddress .
					#	BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/agentStatus") AS ?requestURI )
					}"""^^xsd:string
	] .

:Wait4LAR
	a bt:Wait ;
	rdfs:label "Wait: wait for LAR to be populated" ;
	rdfs:comment "" ;
	bt:milliseconds "5000"^^xsd:int .

:Wait1Sec
	a bt:Wait ;
	rdfs:label "Wait: 1 second" ;
	rdfs:comment "" ;
	bt:milliseconds "1000"^^xsd:int .

:JustFail
	a bt:Fail ;
	rdfs:label "Fail on Purpose"^^xsd:string .


:WriteAll2Lakr
	a bt:Write ;
	rdfs:label "Write: all to LAKR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:AgentKnowledge ;
		bt:sparql """
				CONSTRUCT  {
						?s ?p ?o .
				}
				WHERE {
						?s ?p ?o .
				} """^^xsd:string ;
	] .





#------------MAJAN Stuff----------------------

:PopulateLARRepos
	a bt:BehaviorTree ;
	a bt:Root ;
	rdfs:label "Populate Local LAR Repository" ;
	bt:hasChild [
					a bt:Priority ;
					bt:hasChildren (
										[
											a bt:Sequence ;
											bt:hasChildren (
																:EventHandlerRequestLARTriples
																:UpdateBehaviorRunning
																:UpdateCreateHeaderDispatcherMessage
																:MessageSendLARMessageWPM
																:DefaultFailed
															)
										]
										[
											a bt:Sequence ;
											bt:hasChildren (
																:EventHandlerReceiveLocalAgents
																:UpdateBehaviorRunning
																[
																	a bt:Priority ;
																	bt:hasChildren (
																						[
																							a bt:Invert ;
																							bt:hasChild
																										:ConditionLARPopulated
																						]
																						:RemoveLARContent
																						:UpdateLARAgentKnowledge
																					)
																]
																:WriteTriplesLAR
																:UpdateAgentKnowsLAR
																:UpdateLARExecutionKnowledge
																:UpdateDeleteBehaviorRunning
															)
										]
								   )
				] .
:UpdateDeleteBehaviorRunning
	a bt:Update ;
	rdfs:label "Update: Delete agentRunning Flag in the LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					DELETE {
						?agent welcome:hasBTRunning ?val .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
						?agent welcome:hasBTRunning ?val .
					}"""^^xsd:string ;
		] .
:UpdateLARExecutionKnowledge
	a bt:Update ;
	rdfs:label "Update: LAR in Execution Knowledge" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:sparql """
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					DELETE {
						?s ?p ?o .
						?s rdf:type ajan:Agent.
					} WHERE {
						?s ?p ?o .
						?s rdf:type ajan:Agent .

					}"""^^xsd:string ;
		] .
:RemoveLARContent
	a bt:Update ;
	rdfs:label "Update: Remove LAR Content" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					DELETE {
						?s ?o ?p .
					}
					WHERE {
						?s ?o ?p .
					}
					"""^^xsd:string ;
		] .
:UpdateLARAgentKnowledge
	a bt:Update ;
	rdfs:label "Delete LAR Agent Knowledge" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
				PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX ajan: <http://www.ajan.de/ajan-ns#>
				DELETE {
					?agent welcome:knowsLocalAgents ?repoName .
				}
				INSERT {
					?agent welcome:needsPopulateLAR "localRepo" .
				}
				WHERE {
					?agent rdf:type ajan:Agent .
				}"""^^xsd:string ;
		] .
:WriteTriplesLAR
	a bt:Write ;
	rdfs:label "Write Triples in LAR" ;
	bt:query [
		a bt:ConstructQuery ;
		bt:originBase ajan:ExecutionKnowledge ;
		bt:targetBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
			PREFIX ajan: <http://www.ajan.de/ajan-ns#>
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			CONSTRUCT {
				?s ?p ?o .
				?s rdf:type ajan:Agent .
			} WHERE  {
				?s ?p ?o .
				?s rdf:type ajan:Agent .
			}"""^^xsd:string ;
	] .
:UpdateAgentKnowsLAR
	a bt:Update ;
	rdfs:label "Update: Agent Knows LAR" ;
	bt:query  [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					DELETE {
						welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
					}
					INSERT {
						?agent welcome:knowsLocalAgents ajan:LocalAgentsKnowledge .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
					}
					"""^^xsd:string ;
		] .
:DefaultFailed
	a bt:Fail ;
	rdfs:label "Default Fail - Successful Request to KBS"^^xsd:string .
:UpdateBehaviorRunning
	a bt:Update ;
	rdfs:label "Update: Write agentRunning Flag in the LAKR" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

					INSERT {
						?agent welcome:hasBTRunning "true"^^xsd:boolean .
					}
					 WHERE {
						?agent rdf:type ajan:Agent .
					}"""^^xsd:string ;
		] .
:ConditionLARPopulated
	a bt:Condition ;
	rdfs:label "Condition: LAR initialized?" ;
	bt:query  [
		a bt:AskQuery ;
		bt:originBase ajan:LocalAgentsKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX ajan: <http://www.ajan.de/ajan-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					ASK
					WHERE {
						?agent rdf:type ajan:Agent .
						?agent ?p ?o .
					}"""^^xsd:string ;
		] .


:EventHandlerReceiveLocalAgents
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Receive Local Agents" ;
	bt:event <http://localhost:8090/rdf4j/repositories/agents#ReceiveLocalAgentsEvent> ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:ExecutionKnowledge ;
					bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						CONSTRUCT {
							?s ?p ?o .
						}
						WHERE {
							?s ?p ?o .
						}"""^^xsd:string ;
				] .
:MessageSendLARMessageWPM
	a bt:Message ;
	rdfs:label "Message: Request KBS populate LAR" ;
	rdfs:comment "Message: Request KBS populate LAR" ;
	bt:targetBase ajan:ExecutionKnowledge ;
	bt:binding [
		a http-core:Request ;
		http-core:httpVersion "1.1"^^xsd:string ;
		http-core:mthd http-methods:POST ;
		bt:headers [
			a bt:SelectQuery;
			a bt:QueryUri ;
			bt:originBase ajan:AgentKnowledge ;
			bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				SELECT ?hdrName ?fieldValue
				WHERE {
						?headerName welcome:hasHeaderName ?hdrName .
						?headerName welcome:hasHeaderValue ?fieldValue .
				}"""^^xsd:string
		] ;
		http-core:headers ([
					a http-core:Header ;
					http-core:hdrName http-headers:accept ;
					http-core:fieldValue "text/turtle"
				][
					a http-core:Header ;
					http-core:hdrName http-headers:content-type ;
					http-core:fieldValue "text/turtle"
				]
		) ;
		http-core:body [
			a actn:Payload ;
			bt:query [
				rdf:type bt:ConstructQuery ;
				bt:originBase ajan:AgentKnowledge ;
				bt:sparql """
						PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
						PREFIX ajan: <http://www.ajan.de/ajan-ns#>
						CONSTRUCT {
							?agent rdf:type ajan:Agent .
						}
						WHERE {
							?agent rdf:type ajan:Agent .
						}"""^^xsd:string
		  ]
		] ;
	] ;
	bt:queryUri [
	a bt:SelectQuery ;
	a bt:QueryUri ;
	bt:originBase ajan:AgentKnowledge ;
	bt:sparql """
				PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
				PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
				SELECT ?requestURI
				WHERE
				{
				  welcome:dispatcher welcome:hasAddress ?partialAddress .
				  BIND(CONCAT(STR(?partialAddress), "/welcome/integration/workflow/dispatcher/globalRepository?repository=war") AS ?requestURI )
				}"""^^xsd:string
	] .
:UpdateCreateHeaderDispatcherMessage
	a bt:Update ;
	rdfs:label "Update: Header Dispatcher Message" ;
	bt:query [
		a bt:UpdateQuery ;
		bt:originBase ajan:AgentKnowledge ;
		bt:sparql """
					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
					DELETE{
						welcome:headerCorrelation welcome:hasHeaderName "X-Correlation-ID" .
						welcome:headerCorrelation welcome:hasHeaderValue ?correlationID .
						welcome:headerUserID welcome:hasHeaderName "X-User-ID" .
						welcome:headerUserID welcome:hasHeaderValue ?id .
					}
					INSERT {
						welcome:headerCorrelation welcome:hasHeaderName "X-Correlation-ID" .
						welcome:headerCorrelation welcome:hasHeaderValue ?correlationID .
						welcome:headerUserID welcome:hasHeaderName "X-User-ID" .
						welcome:headerUserID welcome:hasHeaderValue ?id .
					}
					WHERE {
						?msg welcome:hasCorrelationID ?correlationID .
						?du rdf:type welcome:DialogueUser .
						?du welcome:hasUserId ?id .
					}
					"""^^xsd:string ;
		] .
:EventHandlerRequestLARTriples
	a bt:HandleEvent ;
	rdfs:label "EventHandler: Request Populate LAR" ;
	bt:event <http://localhost:8090/rdf4j/repositories/agents#PopulateLAREvent> ;
	bt:validate [
					a bt:ConstructQuery ;
					bt:targetBase ajan:AgentKnowledge ;
					bt:sparql """
						PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>
						CONSTRUCT {
							welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
						}
						WHERE {
							welcome:myWelcomeAgent welcome:needsPopulateLAR "localRepo" .
						}"""^^xsd:string ;
				] .